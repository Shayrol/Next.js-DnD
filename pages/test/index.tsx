import { FormEvent, useEffect, useState } from "react";
import {
  DragDropContext,
  Draggable,
  Droppable,
  DropResult,
} from "react-beautiful-dnd";
import { FaFire } from "react-icons/fa";
import { FiPlus, FiTrash } from "react-icons/fi";

interface Item {
  id: string;
  content: string;
  column: string;
}

export default function App() {
  // --- Mock Îç∞Ïù¥ÌÑ∞
  const [items, setItems] = useState([
    { id: "1", content: "1212", column: "todo" },
    { id: "2", content: "2222", column: "doing" },
    { id: "9", content: "3333", column: "todo" },
    { id: "4", content: "4444", column: "doing" },
    { id: "7", content: "5555", column: "done" },
    { id: "0", content: "6666", column: "todo" },
  ]);

  // Ïª¨ÎüΩ Í≥µÍ∞Ñ
  const columns = ["todo", "doing", "done"];

  // Add Task
  const [adding, setAdding] = useState<{ [key: string]: boolean }>({});
  // Task ÎÇ¥Ïö©
  const [text, setText] = useState("");
  // dark, light Î™®Îìú
  const [isDarkMode, setIsDarkMode] = useState(false);

  useEffect(() => {
    const storedTheme = localStorage.getItem("theme");
    setIsDarkMode(storedTheme === "dark");
  }, []);

  // Îã§ÌÅ¨Î™®Îìú ÏÉÅÌÉúÎ≥ÄÌôî
  useEffect(() => {
    localStorage.setItem("theme", isDarkMode ? "dark" : "light");
  }, [isDarkMode]);

  // Îã§ÌÅ¨ Î™®Îìú ÌÜ†Í∏Ä Ìï®Ïàò
  const toggleDarkMode = () => {
    setIsDarkMode((prev) => !prev);
  };

  // --- DraggableÏù¥ DroppableÎ°ú ÎìúÎûòÍ∑∏ ÎêòÏóàÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ïù¥Î≤§Ìä∏
  // source: ÏÑ†ÌÉùÎêú ItemÏùò DropÍ≥º index (droppableId: 'todo', index: 1)
  // destination: ÏµúÏ¢Ö ÎèÑÏ∞©Îêú ItemÏù¥ DropÍ≥º index (droppableId: 'done', index: 0)
  // --> todo 2Î≤àÏß∏ ItemÏùÑ ÎìúÎûòÍ∑∏Î•º ÌÜµÌï¥ doneÏùò Ï≤´ Î≤àÏß∏Î°ú ÎìúÎûçÌï®
  const onDragEnd = ({ source, destination }: DropResult) => {
    console.log("onDragEnd Start");
    console.log("source: ", source);
    console.log("destination: ", destination);

    if (!destination) return;

    const sourceColumn = source.droppableId; // ÎìúÎûòÍ∑∏Îêú ÏïÑÏù¥ÌÖúÏùò ÌòÑÏû¨ column
    const destinationColumn = destination.droppableId; // ÎìúÎ°≠Îêú ÏúÑÏπòÏùò column

    // ÏññÏùÄ Î≥µÏÇ¨
    // const _items = [...items];
    // ÍπäÏùÄ Î≥µÏÇ¨
    const _items: Item[] = JSON.parse(JSON.stringify(items));

    // source columnÍ≥º destination columnÏóê Ìï¥ÎãπÌïòÎäî ÏïÑÏù¥ÌÖúÎì§ÏùÑ ÌïÑÌÑ∞ÎßÅ
    const filteredSourceItems = _items.filter(
      (item) => item.column === sourceColumn
    );

    const filteredDestinationItems = _items.filter(
      (item) => item.column === destinationColumn
    );

    // üéà Ïì∞Î†àÍ∏∞ÌÜµ
    if (destinationColumn === "trash") {
      // sourceÏóêÏÑú ÎìúÎûòÍ∑∏Îêú ÏïÑÏù¥ÌÖúÏùÑ Ï∞æÍ≥† spliceÎ°ú Ï†úÍ±∞
      const [targetItem] = filteredSourceItems.splice(source.index, 1);

      if (!targetItem) return; // ÎßåÏïΩ ÎåÄÏÉÅ ÏïÑÏù¥ÌÖúÏù¥ ÏóÜÎã§Î©¥ Ï¢ÖÎ£å

      // targetItemÏùÑ ÏÇ≠Ï†ú ÎåÄÏÉÅ Ïª¨Îüº(trash)ÏúºÎ°ú Ïù¥Îèô
      targetItem.column = destinationColumn;
      console.log("targetItem: ", targetItem);

      // ÏÇ≠Ï†úÎêú ÏïÑÏù¥ÌÖúÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
      console.log("filteredSourceItems after splice: ", filteredSourceItems);

      // Ï†ÑÏ≤¥ _items Î∞∞Ïó¥ÏóêÏÑú targetItemÏùÑ Ï†úÏô∏Ìïú ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ÏùÑ ÏÉùÏÑ± (undefined ÏóÜÏù¥)
      const updatedItems: Item[] = _items.filter(
        (item) => item.id !== targetItem.id // targetItemÍ≥º Í∞ôÏùÄ idÎ•º Í∞ÄÏßÑ ÏïÑÏù¥ÌÖúÏùÑ Ï†úÏô∏
      );

      console.log("updatedItems: ", updatedItems);

      // ÏÉÅÌÉú Î≥ÄÍ≤Ω
      setItems(updatedItems);

      return;
    }

    // ÏÑ†ÌÉùÌïú ItemÏùò ÏöîÏÜå Ï¶â Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¥
    // source.index: DndÏóê Ï†úÍ≥µÌïòÎäî ÏÑ†ÌÉùÎêú Ïª¨ÎüºÏùò index ÏúÑÏπò
    const [targetItem] = filteredSourceItems.splice(source.index, 1);

    if (!targetItem) return; // ÎåÄÏÉÅ ÏïÑÏù¥ÌÖúÏù¥ ÏóÜÏúºÎ©¥ ÏïÑÎ¨¥ ÎèôÏûëÎèÑ ÌïòÏßÄ ÏïäÏäµÎãàÎã§.

    // ÎìúÎûòÍ∑∏Í∞Ä Í∞ôÏùÄ Ïª¨Îüº ÎÇ¥ÏóêÏÑú Î∞úÏÉùÌïú Í≤ΩÏö∞
    if (sourceColumn === destinationColumn) {
      // Í∏∞Ï°¥ ÏïÑÏù¥ÌÖúÏùÑ ÏÉàÎ°úÏö¥ ÏúÑÏπòÏóê ÏÇΩÏûÖ
      filteredSourceItems.splice(destination.index, 0, targetItem);

      // Ï†ÑÏ≤¥ _items Î∞∞Ïó¥ÏóêÏÑú ÏóÖÎç∞Ïù¥Ìä∏Îêú sourceColumnÏùò ÏïÑÏù¥ÌÖúÎì§Î°ú Î∞òÏòÅ
      const updatedItems: Item[] = _items.map((item) => {
        if (item.column === sourceColumn) {
          return filteredSourceItems.shift()!; // ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏïÑÏù¥ÌÖúÏùÑ Î∞òÏòÅ
        }
        return item; // ÎÇòÎ®∏ÏßÄÎäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
      });

      // ÏÉÅÌÉú Î≥ÄÍ≤Ω
      setItems(updatedItems);
    } else {
      // üéà Îã§Î•∏ Ïª¨ÎüºÏúºÎ°ú Ïù¥ÎèôÌïòÎäî Í≤ΩÏö∞
      // ÏÑ†ÌÉùÌïú columnÏùÑ Ïù¥ÎèôÌï† Îã§Î•∏ columnÏúºÎ°ú Î≥ÄÍ≤Ω
      targetItem.column = destinationColumn; // ÏïÑÏù¥ÌÖúÏùò column ÏóÖÎç∞Ïù¥Ìä∏

      // Í∏∞Ï°¥ ÏïÑÏù¥ÌÖúÏùÑ ÏÉàÎ°úÏö¥ ÏúÑÏπòÏóê ÏÇΩÏûÖ
      filteredDestinationItems.splice(destination.index, 0, targetItem);
      console.log("filteredDestinationItems: ", filteredDestinationItems);

      // Ï†ÑÏ≤¥ _items Î∞∞Ïó¥ÏóêÏÑú ÎåÄÏÉÅ Ïª¨ÎüºÏùò ÏïÑÏù¥ÌÖúÎì§Îßå ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
      const updatedItems: Item[] = _items.map((item) => {
        if (item.column === destinationColumn) {
          return filteredDestinationItems.shift()!; // Ïù¥ÎèôÎêú ÏïÑÏù¥ÌÖú ÏóÖÎç∞Ïù¥Ìä∏
        }
        return item; // ÎÇòÎ®∏ÏßÄÎäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
      });

      // ÏÉÅÌÉú Î≥ÄÍ≤Ω
      setItems(updatedItems);
    }
  };

  // --- requestAnimationFrame Ï¥àÍ∏∞Ìôî
  const [enabled, setEnabled] = useState(false);

  // Next.jsÏóêÏÑú ÎèôÏûëÌïòÍ∏∞ ÏúÑÌïú ÌôòÍ≤ΩÏÑ∏ÌåÖÏù¥Îã§. (next.config.mjsÏóêÏÑú reactStrictMode: false ÌïòÍ∏∞)
  useEffect(() => {
    const animation = requestAnimationFrame(() => setEnabled(true));

    return () => {
      cancelAnimationFrame(animation);
      setEnabled(false);
    };
  }, []);

  if (!enabled) {
    return null;
  }
  // --- requestAnimationFrame Ï¥àÍ∏∞Ìôî END

  const itemCountInColumn = (columnId: string) => {
    return items.filter((el) => el.column === columnId).length;
  };

  // ÌÖåÏä§ÌÅ¨ ÏÉùÏÑ±
  const onClickAddTask = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!text.trim().length) return;

    const columnId = e.currentTarget.id;

    const newTask = {
      id: Math.random().toString(),
      content: text.trim(),
      column: columnId,
    };

    setItems((pv) => [...pv, newTask]);
    toggleAdding(columnId);
  };

  const toggleAdding = (columnId: string) => {
    setAdding((prev) => ({
      ...prev,
      [columnId]: !prev[columnId], // ColumnÎ≥ÑÎ°ú adding ÏÉÅÌÉú ÌÜ†Í∏Ä
    }));
  };

  return (
    <div
      className={`h-screen w-full flex justify-center items-start py-10  
      ${isDarkMode ? " bg-gray-900 text-white" : " bg-amber-200 text-black"}`}
    >
      <div
        className={`border border-red-900 mr-[10px] cursor-pointer p-[3px] px-[5px] rounded ${
          isDarkMode ? "bg-white text-black" : "bg-black text-white"
        }`}
        onClick={toggleDarkMode}
      >
        {isDarkMode ? "Dark" : "Light"}
      </div>
      <div className="max-w-[1200px] flex">
        <DragDropContext onDragEnd={onDragEnd}>
          {columns.map((columnId) => (
            <Droppable key={columnId} droppableId={columnId}>
              {(provided, snapshot) => (
                <div className="flex flex-col h-full w-72 mx-2">
                  <div className="flex justify-between items-center ">
                    <h2 className="mb-2 text-xl font-bold">{columnId}</h2>
                    <h2 className="mb-2 text-xl font-bold">
                      {itemCountInColumn(columnId)}
                    </h2>
                  </div>
                  {/* Task Í≥µÍ∞Ñ */}
                  <div
                    ref={provided.innerRef}
                    {...provided.droppableProps}
                    className={`overflow-y-auto overflow-x-clip shadow-md h-full pr-1 pb-2 ${
                      snapshot.isDraggingOver
                        ? isDarkMode
                          ? "bg-neutral-700/80"
                          : "bg-amber-300/80"
                        : ""
                    }`}
                  >
                    {items
                      .filter((item) => item.column === columnId)
                      .map((item, index) => (
                        <Draggable
                          key={item.id}
                          draggableId={item.id}
                          index={index}
                        >
                          {(provided, snapshot) => (
                            // Task
                            <div
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              className={`rounded px-2 py-3 mb-1 text-black border border-neutral-400  hover:bg-gray-300/60 transition
                              ${
                                snapshot.isDragging
                                  ? "bg-gray-300/60"
                                  : "bg-neutral-50"
                              }`}
                            >
                              {item.content}
                            </div>
                          )}
                        </Draggable>
                      ))}
                    {provided.placeholder}
                    {adding[columnId] ? (
                      // Add Task
                      <form id={columnId} onSubmit={onClickAddTask}>
                        <textarea
                          onChange={(e) => setText(e.target.value)}
                          autoFocus
                          placeholder="Add new task..."
                          className="w-full h-[100px] rounded border border-neutral-400 bg-slate-50 p-3 text-sm text-black placeholder-stone-400 focus:outline-0"
                        />
                        <div className="mt-1.5 flex items-center justify-end gap-1.5">
                          <button
                            onClick={() => toggleAdding(columnId)}
                            className="px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-500"
                          >
                            Close
                          </button>
                          <button
                            type="submit"
                            className="flex items-center gap-1.5 rounded bg-neutral-50 px-3 py-1.5 text-xs text-neutral-950 transition-colors hover:bg-neutral-300"
                          >
                            <span>Add</span>
                            <FiPlus />
                          </button>
                        </div>
                      </form>
                    ) : (
                      <button
                        onClick={() => toggleAdding(columnId)}
                        className="flex w-full items-center gap-1.5 px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-500"
                      >
                        <span>Add card</span>
                        <FiPlus />
                      </button>
                    )}
                  </div>
                </div>
              )}
            </Droppable>
          ))}

          {/* Ïì∞Î†àÍ∏∞ ÌÜµ */}
          <Droppable key="trash" droppableId="trash">
            {(provided, snapshot) => (
              <div
                ref={provided.innerRef}
                {...provided.droppableProps}
                className={`relative flex justify-center items-center h-56 w-72 shrink-0 rounded border text-3xl ${
                  snapshot.isDraggingOver
                    ? "border-red-800 bg-red-800/20 text-red-500"
                    : "border-neutral-500 bg-neutral-500/20 text-neutral-500"
                }`}
              >
                <Draggable key={"trash"} draggableId={"trash"} index={0}>
                  {(provided) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                      className="w-[4rem] flex absolute left-0"
                    ></div>
                  )}
                </Draggable>
                {provided.placeholder}

                <div className="absolute">
                  {snapshot.isDraggingOver ? (
                    <FaFire className="animate-bounce" />
                  ) : (
                    <FiTrash />
                  )}
                </div>
              </div>
            )}
          </Droppable>
        </DragDropContext>
      </div>
    </div>
  );
}

// Ïù¥ÎèôÎêú updatedItems Ìï®Ïàò Ïù¥Ìï¥ÌïòÍ≥† ÎÑòÏñ¥Í∞ÄÍ∏∞
// Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Î•º .mapÏùÑ ÌÜµÌï¥ ÏàúÌöåÌïòÍ≥† Ìï¥Îãπ item.columnÍ≥º Ïù¥ÎèôÎêú columnÍ≥º Í∞ôÏúºÎ©¥ shift()ÌïòÎäîÎç∞
// Ïù¥Ìï¥Í∞Ä ÏïàÍ∞ê..

// const updatedItems: Item[] = _items.map((item) => {
//   if (item.column === destinationColumn) {
//     return filteredDestinationItems.shift()!; // Ïù¥ÎèôÎêú ÏïÑÏù¥ÌÖú ÏóÖÎç∞Ïù¥Ìä∏
//   }
//   return item; // ÎÇòÎ®∏ÏßÄÎäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
// });

// Ïó¨Í∏∞ÏÑú copyÌïú _itemsÎ•º map Ìï®ÏàòÎ°ú ÏàúÌöåÌïúÎã§.
// Ï†ÑÏ≤¥ columnÏùÑ ÌÜµÌï¥ ÎìúÎûçÎêú Í≥µÍ∞ÑÏùò columnÍ≥º Í∞ôÏùÄÏßÄ ÎπÑÍµêÎ•º ÌïòÎäîÎç∞
// Í∞ôÏúºÎ©¥
// spliceÎ•º ÌÜµÌï¥ Ìï¥Îãπ index ÏúÑÏπòÏóê Ï∂îÍ∞ÄÎêú Ï¶â Í∞ôÏùÄ columnÏùò Ï∂îÍ∞ÄÎêú ÏÉÅÌÉúÏùò
// filteredDestinationItemsÏùÑ shift()Î°ú Ï≤´ Î≤àÏß∏ ÏöîÏÜåÎ•º Ï†úÍ±∞Î•º ÌïòÍ≥† Î∞òÌôòÏùÑ ÌïòÎäîÎç∞
// updatedItemsÏóê Î∞òÌôòÌïúÎã§.

// Îã§Î•¥Î©¥
// Ìï¥Îãπ Í∞íÏùÑ Í∑∏ÎÉ• Í∑∏ÎåÄÎ°ú updatedItemsÏóê Î∞òÌôîÌïúÎã§.

// Ïù¥Î†áÍ≤å ÏàúÌöåÌïòÎ©¥ÏÑú Ïù¥ÎèôÎêú Í∑∏Î¶¨Í≥† Ìï¥Îãπ indexÏóê Ï∂îÍ∞ÄÎêú ItemÏùò Î∞∞Ïó¥ÏùÑ ÏÉàÎ°ú ÏÉùÏÑ±ÏùÑ ÌïúÎã§.

// Ï¶â Ïù¥Í≥ºÏ†ïÏùÑ Í±∞Ï≥êÏïº Îã§Î•∏ Ïª¨ÎüºÏóê Ïù¥ÎèôÏùÑ ÌïòÍ≥† ÏõêÌïòÎäî ÏúÑÏπò(index)Ïóê Ïù¥ÎèôÏùÑ Ìï† Ïàò ÏûàÎã§.
// Í∑∏Ï†ÑÏóê idÎ°úÎßå ÎπÑÍµêÏùÑ ÌñàÏùÑ ÎïåÎäî ÏúÑÏπòÍπåÏßÄ Ïù¥ÎèôÏù¥ ÏïàÎêòÏóàÏùå. (data ÏÑ†Ïñ∏Îêú Í∞ùÏ≤¥ ÏàúÏúºÎ°ú Í∞ïÏ†ú Ïù¥ÎèôÎê®)

// shiftÎ•º Íµ≥Ïù¥ ÏÇ¨Ïö©Ìïú Ïù¥Ïú†
// filteredDestinationItemsÍ∞Ä Î∞∞Ïó¥Ïù¥Ïó¨ÏÑú shiftÎ•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏúºÎ©¥ Î∞∞Ïó¥ Ïïà Î∞∞Ïó¥Î°ú Ïù¥ÎèôÏùÑ ÌïòÍ≤åÎê®
// Í∑∏ÎûòÏÑú ÏàúÌöåÌïòÎ©¥ÏÑú filteredDestinationItemsÏùò Î∞∞Ïó¥Ïùò ÏöîÏÜåÎ•º Ï†úÍ±∞ Î∞è Î∞òÌôòÏùÑ ÌïòÎäî
// shift() Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï®

// Ïì∞Î†àÍ∏∞ ÌÜµ ÏÇ≠Ï†ú ÏôÑ
// Î¨∏Ï†úÏ†ê
// 1. ÎπÑÏñ¥ÏûàÎäî columnÏóê Task Ï∂îÍ∞Ä Ïãú ÏïΩÍ∞ÑÏùò ÏúÑÏπò Ïù¥ÎèôÏù¥ Ïñ¥ÏÑ§Ìîî
// 2. Ïì∞Î†àÍ∏∞ ÌÜµÏóê Task Drop ÌïòÎ©¥ Î∞îÎ°ú ÏÇ¨ÎùºÏßÄÎäîÍ≤å ÏïÑÎãå ÏôºÏ™Ω ÏúÑÎ°ú Ïù¥Îèô ÌõÑ ÏÇ¨ÎùºÏßê

// Ï≤´ Î≤àÏß∏ Î¨∏Ï†úÎäî columnÏùò ÌÅ¨Í∏∞ Ï¶â DroppableÏùò ÏµúÏÜå ÎÑàÎπÑÎ•º Ï£ºÎ©¥ Ìï¥Í≤∞Îê† ÎìØ ÌïòÎã§.

// Îëê Î≤àÏß∏ Î¨∏Ï†úÎäî DraggableÏù¥ ÏóÜÏñ¥ ÏÉùÍ∏¥ Î¨∏Ï†úÏù∏ÏßÄ Ïûò Î™®Î¶Ñ
// ÏùºÎã® provided.placeholderÏùò Ïù∏Ìïú Í≥µÍ∞Ñ ÏÉùÏÑ±ÏúºÎ°ú ÏÉùÍ∏¥ Î¨∏Ï†ú

//
// Ïì∞Î†àÍ∏∞ ÌÜµ Task Drop ÌõÑ Í∞ÄÏö¥Îç∞Î°ú Ïù¥ÎèôÌïòÍ≤å Ìïú ÌõÑ ÏÇ¨ÎùºÏßÄÍ≤å ÌñàÏùå
// Ìï¥Îãπ ÏûêÎ¶¨ ÎòêÎäî Î∞îÎ°ú ÏÇ¨ÎùºÏßÄÍ≤å ÌïòÍ≥† Ïã∂ÏóàÏúºÎÇò ColumnÏùÑ ÏÇ¨Ïö©ÌïòÍ≥† ÏûàÍ≥† Ïù¥Ïóê ÎåÄÌïú Ïï†ÎãàÎ©îÏù¥ÏÖò
// Ìö®Í≥ºÍ∞Ä ÏùºÏñ¥ÎÇ® - transitionÏùÑ noneÏùÑ Ìï¥Ï§¨ÏúºÎÇò Ìï¥Îãπ TaskÎäî ÏÇ¨ÎùºÏßÄÏßÄ ÏïäÏïòÏùå

// AddÎ•º Ï∂îÍ∞ÄÌï¥ Í∞ÅÍ∞ÅÏùò taskÏóê Ï∂îÍ∞ÄÌï† Ïàò ÏûàÍ≤å ÌñàÏùå
// css Ïä§ÌÉÄÏùº ÏôÑÏÑ±ÌïòÎ©¥ ÎÅù
// Ï∂îÍ∞ÄÎ°ú ÌïòÍ≥† Ïã∂ÏùÄ Í∏∞Îä•ÏùÄ Í∞ÅÍ∞ÅÏùò AddÍ∞Ä ÏïÑÎãå Ïò§Î•∏Ï™Ω ÏÉÅÎã®Ïóê Ï∂îÍ∞ÄÎ•º ÌÅ¥Î¶≠ÏùÑ ÌïòÎ©¥
// column, titleÎ•º Ï∂îÍ∞ÄÌïòÎ©¥ Ìï¥Îãπ ColumnÏóê TaskÍ∞Ä Ï∂îÍ∞Ä ÎêòÎèÑÎ°ù ÌïòÍ∏∞
// Ïï± Î∞òÏùëÌòïÏúºÎ°ú Íµ¨ÌòÑÌïòÍ∏∞
//
// columnÏùò Ïù¥Î¶Ñ Î∞è Ï∂îÍ∞Ä Í∏∞Îä• ÎßåÎì§Í∏∞
// columnsÏùò Î∞∞Ïó¥ÏùÑ Ï∂îÍ∞ÄÌïòÎ©¥ Ìï¥Í≤∞Îê† ÎìØ?
